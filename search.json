[
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "card – a basic playing card",
    "section": "",
    "text": "We will be using numbers as indices into suits and ranks to specify the card. There are the ranks (note that there is a None at index 0 in order to make sure that ranks match indices):\nranks\n\n[None, 'A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\nFor example, the rank at index 1 is\nranks[1]\n\n'A'\nHere are the suits:\nsuits\n\n['♠️', '♣️', '♥️', '♦️']\nThe suit at index 2 is:\nsuits[2]\n\n'♥️'\nsource"
  },
  {
    "objectID": "card.html#comparison-operators",
    "href": "card.html#comparison-operators",
    "title": "card – a basic playing card",
    "section": "Comparison operators",
    "text": "Comparison operators\nEquality, less than. and greater than work on the rank and suit indices:\nFor instance, here’s some tests for equality…\n\ntest_eq(Card(suit=1, rank=3), Card(suit=1, rank=3))\n\n… and a test of &lt; …\n\nassert Card(suit=1, rank=3) &lt; Card(suit=2, rank=3)\n\n… and a test of &gt; …\n\nassert Card(suit=3, rank=3) &gt; Card(suit=2, rank=3)\nassert not Card(suit=1, rank=3) &gt; Card(suit=2, rank=3)\n\n\nsource\n\nCard.__eq__\n\n Card.__eq__ (other:__main__.Card)\n\nReturn self==value.\n\nsource\n\n\nCard.__lt__\n\n Card.__lt__ (other:__main__.Card)\n\nReturn self&lt;value.\n\nsource\n\n\nCard.__gt__\n\n Card.__gt__ (other:__main__.Card)\n\nReturn self&gt;value."
  },
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "deck",
    "section": "",
    "text": "source\n\nDeck\n\n Deck ()\n\nA deck of 52 standard cards.\nWhen we initially create a deck, all of the Cards will be present:\n\ndeck = Deck()\ndeck\n\nThere should be 52 cards.\n\ntest_eq(len(deck), 52)\n\nWe can check if a card in the deck:\n\nCard(1, 1) in deck\n\n\nsource\n\n\nDeck.pop\n\n Deck.pop (idx:int=-1)\n\nRemove one card from the deck\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nThe index of the card to remove\n\n\n\n\ndeck = Deck()\ndeck.pop()\n\nThere are 51 cards in the deck now.\n\ntest_eq(len(deck), 51)\n\n\nsource\n\n\nDeck.remove\n\n Deck.remove (card:nbdev_cards_tryout.card.Card)\n\nRemoves card from the deck or raises exception if it is not there.\n\n\n\n\nType\nDetails\n\n\n\n\ncard\nCard\nCard to remove\n\n\n\n\ndeck = Deck()\ncard12 = Card(1, 2)\ndeck.remove(card12)\n\nassert card12 not in deck"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev_cards_tryout",
    "section": "",
    "text": "A deck of cards library following the video demo of nbdev."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev_cards_tryout",
    "section": "Install",
    "text": "Install\nInstalling through pip or conda is not set up."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev_cards_tryout",
    "section": "How to use",
    "text": "How to use\nThis library provides a Card class you can use to create, display, and compare playing cards:\n\nCard(1, 3)\n\n3♣️\n\n\nSuits are numbered according to this list:\n\nsuits\n\n['♠️', '♣️', '♥️', '♦️']"
  }
]